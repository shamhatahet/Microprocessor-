#include <xc.h>
#include <string.h>
#define _XTAL_FREQ 20000000

// === CONFIG BITS ===
#pragma config FOSC = HS
#pragma config WDTE = OFF
#pragma config PWRTE = ON
#pragma config BOREN = OFF
#pragma config LVP = OFF
#pragma config CPD = OFF
#pragma config WRT = OFF
#pragma config CP = OFF

// === LCD Pins ===
#define RS PORTDbits.RD0
#define EN PORTDbits.RD1
#define D4 PORTDbits.RD2
#define D5 PORTDbits.RD3
#define D6 PORTDbits.RD4
#define D7 PORTDbits.RD5

// === IO ===
#define BUZZER PORTAbits.RA0
#define GREEN_LED PORTCbits.RC3
#define RED1 PORTCbits.RC4
#define RED2 PORTCbits.RC5
#define RED3 PORTCbits.RC6
#define SERVO PORTCbits.RC2

char correct_pass[] = "2006";
char input_pass[5] = "";
char keypad[3][4] = {
    {'1', '4', '7', '*'},
    {'2', '5', '8', '0'},
    {'3', '6', '9', '#'}
};
int attempts = 0;

void Lcd_Init(); void Lcd_Cmd(char); void Lcd_Char(char); void Lcd_String(const char *);
void Lcd_Clear(); void Lcd_Set_Cursor(char, char); char Keypad_Read();
void Servo_Forward(); void Servo_Backward(); void Passive_Buzzer_Tone();
void Locked_Out_Alarm();

void main() {
    TRISA0 = 0;
    TRISC2 = 0; TRISC3 = 0; TRISC4 = 0; TRISC5 = 0; TRISC6 = 0;
    TRISD = 0x00; TRISB = 0x0F;

    PORTA = 0; PORTC = 0xFF; PORTD = 0;
    OPTION_REGbits.nRBPU = 0; ADCON1 = 0x06;
    __delay_ms(50);

    Lcd_Init(); Lcd_Clear(); Lcd_Set_Cursor(1, 1);
    Lcd_String("Enter Password:");
    RED1 = RED2 = RED3 = 1; GREEN_LED = 1;

    while (1) {
        char ch; int index = 0;
        memset(input_pass, 0, sizeof(input_pass));

        while (index < 4) {
            ch = Keypad_Read();
            if (ch != 0) {
                input_pass[index++] = ch;
                Lcd_Set_Cursor(2, index);
                Lcd_Char('*');
                while (Keypad_Read() != 0);
                __delay_ms(150);
            }
        }
        input_pass[4] = '\0';

        if (strcmp(input_pass, correct_pass) == 0) {
            Lcd_Clear();
            Lcd_Set_Cursor(1, 1);
            Lcd_String("Access Granted");
            GREEN_LED = 0; RED1 = RED2 = RED3 = 1;
            BUZZER = 1; __delay_ms(100); BUZZER = 0;

            Servo_Forward();  // Open lock

            Lcd_Clear();
            Lcd_Set_Cursor(1, 1);
            Lcd_String("Press * to lock");

            while (1) {
                char lockKey = Keypad_Read();
                if (lockKey == '*') {
                    Servo_Backward();  // Close lock
                    break;
                }
            } 


            GREEN_LED = 1;
            Lcd_Clear(); Lcd_Set_Cursor(1, 1);
            Lcd_String("Enter Password:");
            attempts = 0;
        } else {
            attempts++;
            Lcd_Clear();
            Lcd_Set_Cursor(1, 1);
            Lcd_String("Access Denied");
            Lcd_Set_Cursor(2, 1);
            Lcd_String("Try Again!");
            Passive_Buzzer_Tone();

            if (attempts == 1) RED1 = 0;
            if (attempts == 2) RED2 = 0;
            if (attempts == 3) RED3 = 0;

            if (attempts >= 3) {
                Lcd_Clear(); Lcd_Set_Cursor(1, 1);
                Lcd_String("LOCKED OUT");
                while (1) {
                    Locked_Out_Alarm();
                }
            }

            __delay_ms(1000);
            Lcd_Clear(); Lcd_Set_Cursor(1, 1);
            Lcd_String("Enter Password:");
        }
    }
}

char Keypad_Read() {
    const char row_mask[] = {0b11101111, 0b11011111, 0b10111111};
    TRISB = 0x0F; PORTB = 0xF0;
    for (int row = 0; row < 3; row++) {
        PORTB = row_mask[row]; __delay_ms(5);
        if (!(PORTB & 0x01)) { while (!(PORTB & 0x01)); return keypad[row][0]; }
        if (!(PORTB & 0x02)) { while (!(PORTB & 0x02)); return keypad[row][1]; }
        if (!(PORTB & 0x04)) { while (!(PORTB & 0x04)); return keypad[row][2]; }
        if (!(PORTB & 0x08)) { while (!(PORTB & 0x08)); return keypad[row][3]; }
    }
    return 0;
}
void Lcd_Cmd(char cmd) {
    RS = 0;
    D4 = (cmd >> 4) & 1; D5 = (cmd >> 5) & 1;
    D6 = (cmd >> 6) & 1; D7 = (cmd >> 7) & 1;
    EN = 1; __delay_ms(1); EN = 0;
    D4 = cmd & 1; D5 = (cmd >> 1) & 1;
    D6 = (cmd >> 2) & 1; D7 = (cmd >> 3) & 1;
    EN = 1; __delay_ms(1); EN = 0;
    __delay_ms(2);
}

void Lcd_Char(char data) {
    RS = 1;
    D4 = (data >> 4) & 1; D5 = (data >> 5) & 1;
    D6 = (data >> 6) & 1; D7 = (data >> 7) & 1;
    EN = 1; __delay_ms(1); EN = 0;
    D4 = data & 1; D5 = (data >> 1) & 1;
    D6 = (data >> 2) & 1; D7 = (data >> 3) & 1;
    EN = 1; __delay_ms(1); EN = 0;
    __delay_ms(2);
}

void Lcd_Init() {
    __delay_ms(20);
    Lcd_Cmd(0x02); Lcd_Cmd(0x28); Lcd_Cmd(0x0C);
    Lcd_Cmd(0x06); Lcd_Cmd(0x01); __delay_ms(2);
}

void Lcd_Set_Cursor(char row, char pos) {
    if (row == 1) Lcd_Cmd(0x80 + pos - 1);
    else if (row == 2) Lcd_Cmd(0xC0 + pos - 1);
}

void Lcd_String(const char *str) { while (*str) Lcd_Char(*str++); }
void Lcd_Clear() { Lcd_Cmd(0x01); __delay_ms(2); }

void Servo_Forward() {
    for (int i = 0; i < 50; i++) {
        SERVO = 1;
        __delay_us(2000);  // Full forward pulse
        SERVO = 0;
        __delay_ms(18);
    }
}

void Servo_Backward() {
    for (int i = 0; i < 50; i++) {
        SERVO = 1;
        __delay_us(1000);  // Full backward pulse
        SERVO = 0;
        __delay_ms(19);
    }
}

void Passive_Buzzer_Tone() {
    for (int i = 0; i < 200; i++) {
        BUZZER = 1; __delay_us(500); BUZZER = 0; __delay_us(500);
    }
}

void Locked_Out_Alarm() {
    for (int i = 0; i < 10; i++) {
        RED1 = RED2 = RED3 = 0;
        BUZZER = 1;
        __delay_ms(300);
        RED1 = RED2 = RED3 = 1;
        BUZZER = 0;
        __delay_ms(300);
    }
}
